- id: 'Rubbish: Update Bin Night Sensors'
  alias: 'Rubbish: Update Bin Night Sensors'
  trigger:
  - event: start
    platform: homeassistant
  - hours: /1
    platform: time_pattern
  action:
  - entity_id: sensor.recycling_bin_today, sensor.recycling_bin_tomorrow, sensor.landfill_bin_today,
      sensor.landfill_bin_tomorrow, sensor.garden_bin_today, sensor.garden_bin_tomorrow
    service: homeassistant.update_entity
- id: 'Rubbish: Calculate Bin Reminders'
  alias: 'Rubbish: Calculate Bin Reminders'
  trigger:
  - at: '19:00:00'
    platform: time
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ now().strftime("%H:%M") == "19:00" and now().weekday() ==
        1 }}'
    - condition: or
      conditions:
      - condition: state
        entity_id: sensor.recycling_bin_today
        state: 'True'
      - condition: state
        entity_id: sensor.landfill_bin_today
        state: 'True'
  action:
  - data_template:
      message: "'{%- if (states.sensor.recycling_bin_today.state) == \"True\" -%}\
        \ \n  Recycling Bin Night \n {%- elif (states.sensor.landfill_bin_today.state)\
        \ == \"True\" -%}\n   Landfill Bin Tonight \n {%- endif -%}\n {%- if (states.sensor.garden_bin_today.state)\
        \ == \"True\" -%}\n   Garden Bin Tonight \n {%- endif -%}'"
      title: Bins Out Tonight
    service: notify.everyone
  initial_state: true
- id: 'Bedroom : Stop Timer and Turn Off Night Light'
  alias: 'Bedroom : Night Light Stop Timer and Turn Off Boolean'
  description: ''
  trigger:
  - event_data:
      entity_id: timer.night_light_timer
    event_type: timer.finished
    platform: event
  condition: []
  action:
  - entity_id: input_boolean.night_light_stripper
    service: input_boolean.turn_off
  mode: single
- id: 'Bedroom: Light Wee Bears Wardrobe When The Door Opens'
  alias: 'Bedroom: Wee Bears Wardrobe Turn On Light When The Door Opens'
  trigger:
  - device_id: f006cfbf0dd948879ed5d99b79e8d087
    domain: binary_sensor
    entity_id: binary_sensor.wee_bear_wardrobe_door_one_contact
    platform: device
    type: opened
  - device_id: 45da12f50661448785e368a049276411
    domain: binary_sensor
    entity_id: binary_sensor.wee_bear_wardrobe_door_two_contact
    platform: device
    type: opened
  - device_id: 195b37745e4b4af5810f6207203be865
    domain: binary_sensor
    entity_id: binary_sensor.wee_bear_wardrobe_door_three_contact
    platform: device
    type: opened
  condition:
  - condition: state
    entity_id: light.large_wardrobe_stripper
    state: 'off'
  action:
  - data:
      entity_id: light.large_wardrobe_stripper
    service: light.turn_on
  mode: single
- id: 'Bedroom: Turn Off Wee Bears Wardrobe Light When The Door Closes'
  alias: 'Bedroom: Wee Bears Wardrobe Turn Off Light When The Door Closes'
  description: ''
  trigger:
  - device_id: f006cfbf0dd948879ed5d99b79e8d087
    domain: binary_sensor
    entity_id: binary_sensor.wee_bear_wardrobe_door_one_contact
    platform: device
    type: not_opened
  - device_id: 45da12f50661448785e368a049276411
    domain: binary_sensor
    entity_id: binary_sensor.wee_bear_wardrobe_door_two_contact
    platform: device
    type: not_opened
  - device_id: 195b37745e4b4af5810f6207203be865
    domain: binary_sensor
    entity_id: binary_sensor.wee_bear_wardrobe_door_three_contact
    platform: device
    type: not_opened
  condition:
  - condition: state
    entity_id: binary_sensor.wee_bear_wardrobe_door_one_contact
    state: 'off'
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.wee_bear_wardrobe_door_two_contact
      state: 'off'
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.wee_bear_wardrobe_door_three_contact
        state: 'off'
  action:
  - data:
      entity_id: light.large_wardrobe_stripper
    service: light.turn_off
  mode: single
- id: 'Bedroom: Turn Off Squiggley''s Wardrobe Light When The Door Closes'
  alias: 'Bedroom: Squiggley''s Wardrobe Turn Off Light When The Door Closes'
  description: ''
  trigger:
  - type: not_opened
    platform: device
    device_id: 5cda886b86794a49a9df3ff8c5a22c29
    entity_id: binary_sensor.squiggley_wardrobe_door_sensor_contact
    domain: binary_sensor
  condition: []
  action:
  - service: light.turn_off
    entity_id: light.small_wardrobe
  mode: single
- id: 'Bedroom: Light Squiggleys Wardrobe When The Door Opens'
  alias: 'Bedroom: Squiggley''s Wardrobe Turn On Light When The Door Opens'
  trigger:
  - type: opened
    platform: device
    device_id: 5cda886b86794a49a9df3ff8c5a22c29
    entity_id: binary_sensor.squiggley_wardrobe_door_sensor_contact
    domain: binary_sensor
  condition: []
  action:
  - type: turn_on
    device_id: 0e82220331174d0eb8d5091b60790788
    entity_id: light.small_wardrobe
    domain: light
    brightness_pct: 20
  mode: single
- id: 'Bedroom: Turn House Off When Button Pressed'
  alias: 'Bedroom: Turn House Off When Button Pressed'
  description: Turn the whole house off when button pressed
  trigger:
  - device_id: 4d8ebc6acf9f4a06a78a8373ad866566
    discovery_id: 0x00158d0002f99a9f click_single
    domain: mqtt
    platform: device
    subtype: single
    type: click
  condition: []
  action:
  - data: {}
    service: script.home_off
  - data: {}
    entity_id: input_boolean.everyone_sleeping
    service: input_boolean.turn_on
  mode: single
- id: 'Occupancy: Turn On Garden Lights At Dusk'
  alias: 'Occupancy: Turn On Garden Lights At Dusk'
  trigger:
  - event: sunset
    platform: sun
  condition: []
  action:
  - data: {}
    service: homeassistant.turn_on
    entity_id: group.all_garden_lights
  mode: single
- id: 'Occupancy: Turn On Lights When Dark and Someone Is Home'
  alias: 'Occupancy: Turn On Lights When Dark and Someone Is Home'
  trigger:
  - minutes: /1
    platform: time_pattern
  condition:
  - condition: state
    entity_id: input_boolean.everyone_sleeping
    state: 'off'
  - below: 400
    condition: numeric_state
    entity_id: sensor.gateway_illumination_sensor
  - condition: state
    entity_id: sensor.house_occupancy_status
    state: 'on'
  - after: 07:00:00
    before: '23:00:00'
    condition: time
  - condition: state
    entity_id: group.common_lights
    state: 'off'
  action:
  - data:
      entity_id: group.common_lights
    service: homeassistant.turn_on
- id: 'Occupancy: Turn Everything Off When Everyone Leaves'
  alias: 'Occupancy: Turn Everything Off When Everyone Leaves'
  trigger:
  - entity_id: sensor.house_occupancy_status
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - data: {}
    service: script.home_off_when_everyone_leaves
  - data:
      message: Turning everything Off as nobody does be home
    service: notify.squiggley
  - data: {}
    entity_id: media_player.marvin
    service: media_player.turn_off
  - data: {}
    entity_id: alarm_control_panel.house
    service: alarm_control_panel.alarm_arm_away
  mode: single
- id: 'Occupancy: Turn On the Common Lights When Someone Opens the Front Door'
  alias: 'Occupancy: Turn On the Common Lights When Someone Opens the Front Door'
  trigger:
  - entity_id: binary_sensor.front_door_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - below: 400
    condition: numeric_state
    entity_id: sensor.gateway_illumination_sensor
  action:
  - condition: state
    entity_id: group.common_lights
    state: 'off'
  - data:
      entity_id: group.common_lights
    service: homeassistant.turn_on
  - delay: 00:10:00
  - data:
      entity_id: group.common_lights
    service: homeassistant.turn_off
- id: 'Occupancy: Announce Arrive/Leave Home'
  alias: 'Occupancy: Announce Arrive/Leave Home'
  trigger:
  - entity_id: device_tracker.claires_iphone, device_tracker.squigglepad
    from: not_home
    platform: state
    to: home
  - entity_id: device_tracker.claires_iphone, device_tracker.squigglepad
    from: home
    platform: state
    to: not_home
  action:
  - service: notify.squiggley
    data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} is {% if trigger.to_state.state
        == ''home'' %}back{% else %}away{% endif %}.'
      title: ''
  - service: tts.google_say
    entity_id: media_player.office_speaker
    data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} is {% if trigger.to_state.state
        == ''home'' %}back{% else %}away{% endif %}.'
- id: 'Occupancy: Dev : Send message on location updates'
  alias: 'Occupancy: Dev : Send message on location updates'
  trigger:
  - entity_id: device_tracker.claires_iphone, device_tracker.squigglepad
    platform: state
  action:
  - service: notify.squiggley
    data_template:
      message: "{% if trigger.from_state.state != trigger.to_state.state %}\n  Update\
        \ from {{ trigger.to_state.attributes.friendly_name }} - state changed from\
        \ {{ trigger.from_state.state }} to {{ trigger.to_state.state }} Old Lattitude\
        \ = Latitude = {{ trigger.from_state.attributes.latitude }} New latitude =\
        \ Latitude = {{ trigger.to_state.attributes.latitude }}\n{% elif trigger.from_state.state\
        \ == trigger.to_state.state %}\n  {{ trigger.to_state.attributes.friendly_name\
        \ }} no state change. Latitude = {{ trigger.to_state.attributes.latitude }}\n\
        {% endif %}\n"
- id: 'Occupancy: Notify Squiggley when someone arrives home'
  alias: 'Occupancy: Perform Welcome Home When Someone Arrives'
  description: ''
  trigger:
  - entity_id: device_tracker.squigglepad
    event: enter
    platform: zone
    zone: zone.home
  - entity_id: device_tracker.claires_iphone
    event: enter
    platform: zone
    zone: zone.home
  condition: []
  action:
  - data: {}
    entity_id: group.common_lights
    service: homeassistant.turn_on
- id: 'Occupancy: Notify Squiggley when someone leaves home'
  alias: 'Occupancy: Notify Squiggley when someone leaves home'
  description: ''
  trigger:
  - entity_id: device_tracker.squigglepad
    event: leave
    platform: zone
    zone: zone.home
  - entity_id: device_tracker.claires_iphone
    event: enter
    platform: zone
    zone: zone.home
  condition: []
  action:
  - data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} has left the building!'
    service: notify.squiggley
- id: 'Occupancy: Turn Off Garden Lights At Dawn'
  alias: 'Occupancy: Turn Off Garden Lights At Dawn'
  description: ''
  trigger:
  - event: sunrise
    platform: sun
  condition: []
  action:
  - service: homeassistant.turn_off
    data: {}
    entity_id: group.all_garden_lights
  mode: single
- id: 'Occupancy: Front Nut Hut Opened'
  alias: 'Occupancy: Front Nut Hut Opened'
  description: ''
  trigger:
  - type: opened
    platform: device
    device_id: f42fb607333f30963fdf28396af5087d
    entity_id: binary_sensor.front_nut_hut_lid_contact
    domain: binary_sensor
  condition:
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: 'on'
  action:
  - data:
      message: A Squirrel is in the front nut hut!
    service: notify.squiggley
  - data:
      message: A Squirrel is in the front nut hut!
    entity_id: media_player.kitchen_speaker, media_player.office_display
    service: tts.google_say
  - delay: 00:00:03
  - service: media_player.play_media
    data:
      media_content_id: http://192.168.13.11:81/mjpg/FrontClimbingSD
      media_content_type: image/jpg
    entity_id: media_player.office_display
  - delay: 00:00:30
  - service: media_player.turn_off
    data: {}
    entity_id: media_player.office_display
  mode: single
  max: 10
- id: 'Occupancy: Turn Off Back Garden Lights If Nobody is Home'
  alias: 'Occupancy: Turn Off Back Garden Lights If Nobody is Home'
  description: ''
  trigger:
  - at: 00:00:00
    platform: time
  condition:
  - condition: state
    entity_id: sensor.house_occupancy_status
    state: 'Off'
  action:
  - data: {}
    entity_id: light.back_garden
    service: light.turn_off
  mode: single
- id: 'Occupancy: Back Nut Hut Opened'
  alias: 'Occupancy: Back Nut Hut Opened'
  description: ''
  trigger:
  - type: opened
    platform: device
    device_id: e3d43cc43a7046d3959edd5e24bcf2ce
    entity_id: binary_sensor.back_nut_hut_lid_contact
    domain: binary_sensor
  condition:
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: 'on'
  action:
  - data:
      message: A Squirrel is in the back nut hut!
    service: notify.squiggley
  - data:
      message: A Squirrel is in the back nut hut!
    entity_id: media_player.kitchen_speaker, media_player.office_display
    service: tts.google_say
  - delay: 00:00:07
  - service: media_player.play_media
    data:
      media_content_id: http://192.168.13.11:81/mjpg/GarageRoofSD
      media_content_type: image/jpg
    entity_id: media_player.office_display
  - delay: 00:05
  - service: media_player.turn_off
    data: {}
    entity_id: media_player.office_display
  mode: single
  max: 10
- id: 'Server: Turn On The Fan When Its Hot'
  alias: 'Server: Turn On Fan When Its Hot'
  trigger:
  - platform: template
    value_template: '{{ states(''sensor.server_room_thermometer_temperature'') |float
      > states(''input_number.server_fan_on_temperature'')| float}}'
  action:
  - data:
      entity_id: switch.server_fan_relay
    service: switch.turn_on
  mode: single
- id: 'Server: Turn Off The Server Fan When It Has Cooled'
  alias: 'Server: Turn Off The Server Fan When It Has Cooled'
  trigger:
  - platform: template
    value_template: '{{ states(''sensor.server_room_thermometer_temperature'') |float
      < states(''input_number.server_fan_off_temperature'')| float}}'
  action:
  - data:
      entity_id: switch.server_fan_relay
    service: switch.turn_off
  mode: single
- id: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap One'
  alias: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap One'
  trigger:
  - device_id: d20cbe17ea514503beee9028aeb17823
    domain: binary_sensor
    entity_id: binary_sensor.mouse_trap_one_contact
    platform: device
    type: opened
  condition: []
  action:
  - data:
      message: There's a moose been caught aboot this hoose! Trap One
    service: notify.squiggley
- id: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap Two'
  alias: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap Two'
  trigger:
  - device_id: b2c388b2a2f34650bf6f83942b22f5ae
    domain: binary_sensor
    entity_id: binary_sensor.mouse_trap_two_contact
    platform: device
    type: opened
  condition: []
  action:
  - data:
      message: There's a moose been caught aboot this hoose! Trap Two
    service: notify.squiggley
- id: 'Toilet: Motion Detected And Door Closed Then Stop Timer And Set Occupied'
  alias: 'Toilet: Motion Detected And Door Closed Then Stop Timer And Set Occupied'
  trigger:
  - device_id: 47cd4607d0ce4b238cfbda038f535140
    domain: binary_sensor
    entity_id: binary_sensor.toilet_motion_sensor_occupancy
    platform: device
    type: motion
  condition:
  - condition: state
    entity_id: binary_sensor.toilet_door_sensor_contact
    state: 'off'
  - condition: or
    conditions:
    - condition: state
      entity_id: binary_sensor.toilet_motion_sensor_occupancy
      state: 'on'
  action:
  - entity_id: timer.toilet_lights_timer
    service: timer.cancel
  - entity_id: input_boolean.toilet_occupied
    service: input_boolean.turn_on
- id: 'Toilet: Occupied And Door Opened Then Start Timer'
  alias: 'Toilet: Occupied And Door Opened Then Start Timer'
  trigger:
  - device_id: 0f0c07f6241b40d8b9dfbd708c842a6e
    domain: binary_sensor
    entity_id: binary_sensor.toilet_door_sensor_contact
    platform: device
    type: opened
  condition:
  - condition: state
    entity_id: input_boolean.toilet_occupied
    state: 'on'
  - condition: and
    conditions:
    - condition: state
      entity_id: light.toilet_ceiling
      state: 'on'
  action:
  - entity_id: input_boolean.toilet_occupied
    service: input_boolean.turn_off
  - data_template:
      duration: 00:{{ states.input_number.toilet_timer.state | int }}:00
      entity_id: timer.toilet_lights_timer
    entity_id: timer.toilet_lights_timer
    service: timer.start
- id: 'Toilet: Unoccupied, Door is Opened Then Turn On Lights And Start Timer'
  alias: 'Toilet: Unoccupied, Door is Opened Then Turn On Lights And Start Timer'
  trigger:
  - device_id: 0f0c07f6241b40d8b9dfbd708c842a6e
    domain: binary_sensor
    entity_id: binary_sensor.toilet_door_sensor_contact
    platform: device
    type: opened
  - device_id: 47cd4607d0ce4b238cfbda038f535140
    domain: binary_sensor
    entity_id: binary_sensor.toilet_motion_sensor_occupancy
    platform: device
    type: motion
  condition:
  - condition: state
    entity_id: input_boolean.toilet_occupied
    state: 'off'
  action:
  - entity_id: light.toilet_ceiling
    service: light.turn_on
  - data:
      duration: 00:{{ states.input_number.toilet_lights_timer.state | int }}:00
      entity_id: timer.toilet_lights_timer
    entity_id: timer.toilet_lights_timer
    service: timer.start
  mode: single
- id: 'Toilet: Turn off lights at end of timer'
  alias: 'Toilet: Turn off lights at end of timer'
  trigger:
  - event_data:
      entity_id: timer.toilet_lights_timer
    event_type: timer.finished
    platform: event
  action:
  - entity_id: light.toilet_ceiling
    service: light.turn_off
- id: 'Toilet: Occupied Turn vestibule One Light To Red'
  alias: 'Toilet: Occupied Turn vestibule One Light To Red'
  description: ''
  trigger:
  - entity_id: input_boolean.toilet_occupied
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      color_name: red
      entity_id: light.vestibule_one
    service: light.turn_on
- id: 'Vestibule: Turn On Lights When Motion Is Detected'
  alias: 'Vestibule: Turn On Lights When Motion Is Detected'
  trigger:
  - device_id: 7b7ac4ac6a3f4ff390fa7dce96a3959f
    domain: binary_sensor
    entity_id: binary_sensor.vestibule_motion_sensor_occupancy
    platform: device
    type: motion
  condition:
  - condition: state
    entity_id: light.vestibule_ceiling_lights
    state: 'off'
  action:
  - data: {}
    entity_id: light.vestibule_ceiling_lights
    service: light.turn_on
  - delay: 00:005:00
  - data: {}
    entity_id: light.vestibule_ceiling_lights
    service: light.turn_off
- id: 'Slow Cooker: Turn On at specified time'
  alias: 'Slow Cooker: Turn On at specified time'
  trigger:
  - platform: template
    value_template: '{{ states.sensor.time.state == (states.input_datetime.slow_cooker_start.attributes.timestamp
      | int | timestamp_custom("%H:%M", False)) }}'
  condition:
  - condition: state
    entity_id: input_boolean.slow_cooker_timer
    state: 'on'
  action:
  - data:
      entity_id: switch.slow_cooker_relay
    service: switch.turn_on
  - data:
      message: Turning on the slow cooker
    service: notify.squiggley
- id: 'Slow Cooker: Turn Off Slow Cooker at specified time'
  alias: 'Slow Cooker: Turn Off Slow Cooker at specified time'
  trigger:
  - platform: template
    value_template: '{{ states.sensor.time.state == (states.input_datetime.slow_cooker_stop.attributes.timestamp
      | int | timestamp_custom("%H:%M", False)) }}'
  condition:
  - condition: state
    entity_id: input_boolean.slow_cooker_timer
    state: 'on'
  action:
  - data:
      entity_id: switch.slow_cooker_relay
    service: switch.turn_off
  - data:
      entity_id: input_boolean.slow_cooker_timer
    service: input_boolean.turn_off
  - data:
      message: Turning off the slow cooker
    service: notify.squiggley
- id: 'Livingroom: Stupid Box On/Off'
  alias: 'Livingroom: Stupid Box On/Off'
  description: For Google Assistant to be able to turn the stupid box on or off
  trigger:
    platform: state
    entity_id: input_boolean.stupid_box
  action:
    service: script.turn_on
    data_template:
      entity_id: "{% if is_state('sensor.stupid_box_status', 'on') %}\n  script.stupid_box_off\n\
        {% elif is_state('sensor.stupid_box_status', 'off') %}\n  script.stupid_box_on\n\
        {% endif %}\n"
- id: 'Livingroom: Toggle On/Off'
  alias: 'Livingroom: Toggle On/Off'
  description: Turns on the tv, amp, kodi, ambilighting and eventually lights
  trigger:
    platform: state
    entity_id: sensor.livingroom_on_off_switch_click
  condition: []
  action:
    service: script.turn_on
    data_template:
      entity_id: "{% if is_state('sensor.stupid_box_status', 'on') %}\n  script.stupid_box_off\n\
        {% else %}\n  script.stupid_box_on\n{% endif %}\n"
- id: 'Heating: Turn On Boost heating for room'
  alias: 'Heating: Turn On Boost heating for room'
  trigger:
  - entity_id: input_boolean.boost_vestibule_heating, input_boolean.boost_livingroom_heating,
      input_boolean.boost_office_heating, input_boolean.boost_kitchen_heating, input_boolean.boost_katrin_heating,
      input_boolean.boost_bedroom_heating, input_boolean.boost_bedroom_heating
    from: 'off'
    platform: state
    to: 'on'
  action:
  - service: timer.start
    data_template:
      duration: '{% set entity_str =''input_number.''+trigger.entity_id.split(''_'')[2]+''_boost''%}    {%
        set mins = states[entity_str].state | int %}     00:{{mins}}:00'
      entity_id: timer.{{trigger.entity_id.split('_')[2]}}_boost_timer
  - service: climate.set_temperature
    data_template:
      entity_id: climate.{{trigger.entity_id.split('_')[2]}}
      temperature: '{{ states(''input_number.''+trigger.entity_id.split(''_'')[2]+''_temperature'')
        }}'
- id: 'Heating: Turn Off Boost heating for room'
  alias: 'Heating: Turn Off Boost heating for room'
  trigger:
  - entity_id: input_boolean.boost_vestibule_heating, input_boolean.boost_livingroom_heating,
      input_boolean.boost_office_heating, input_boolean.boost_kitchen_heating, input_boolean.boost_katrin_heating,
      input_boolean.boost_bedroom_heating, input_boolean.boost_bedroom_heating
    from: 'on'
    platform: state
    to: 'off'
  action:
  - service: timer.cancel
    data_template:
      entity_id: timer.{{trigger.entity_id.split('_')[2]}}_boost_timer
  - service: climate.set_temperature
    data_template:
      entity_id: climate.{{trigger.entity_id.split('_')[2]}}
      temperature: 7
- id: 'Heating: Turn Off When Boost Timer is Finished'
  alias: 'Heating: Turn Off When Boost Timer is Finished'
  description: ''
  trigger:
  - event_data:
      entity_id: timer.vestibule_boost_timer
    event_type: timer.finished
    platform: event
  - event_data:
      entity_id: timer.livingroom_boost_timer
    event_type: timer.finished
    platform: event
  - event_data:
      entity_id: timer.office_boost_timer
    event_type: timer.finished
    platform: event
  - event_data:
      entity_id: timer.kitchen_boost_timer
    event_type: timer.finished
    platform: event
  - event_data:
      entity_id: timer.bathroom_boost_timer
    event_type: timer.finished
    platform: event
  - event_data:
      entity_id: timer.katrin_boost_timer
    event_type: timer.finished
    platform: event
  - event_data:
      entity_id: timer.bedroom_boost_timer
    event_type: timer.finished
    platform: event
  condition: []
  action:
  - data_template:
      entity_id: input_boolean.boost_{{ trigger.event.data.entity_id.split('.',1)[1].split('_')[0]
        }}_heating
    service: input_boolean.turn_off
- id: 'Heating: Active/deactivate heating schedule for room'
  alias: 'Heating: Active/deactivate heating schedule for room'
  trigger:
  - platform: state
    entity_id: sensor.vestibule_heating_on, sensor.vestibule_heating_off, sensor.livingroom_heating_on,
      sensor.livingroom_heating_off, sensor.office_heating_on, sensor.office_heating_off,
      sensor.kitchen_heating_on, sensor.kitchen_heating_off, sensor.katrin_heating_on,
      sensor.katrin_heating_off, sensor.bedroom_heating_on, sensor.bedroom_heating_off
    to: 'True'
  action:
    service_template: input_boolean.turn_{{ trigger.entity_id.split('_')[-1] }}
    data_template:
      entity_id: "{% if trigger.entity_id.split('_')[2] == 'on'  %}\n  input_boolean.{{\
        \ trigger.entity_id.split('.')[1].replace('heating_on', 'schedule_active')\
        \ }}\n{% else %}\n  input_boolean.{{ trigger.entity_id.split('.')[1].replace('heating_off',\
        \ 'schedule_active') }}\n{% endif %}\n"
- id: 'Heating: Turn on when schedule is active and house is occupied'
  alias: 'Heating: Turn on when schedule is active and house is occupied'
  trigger:
    platform: state
    entity_id: input_boolean.vestibule_schedule_active, input_boolean.livingroom_schedule_active,
      input_boolean.office_schedule_active, input_boolean.kitchen_schedule_active,
      input_boolean.katrin_schedule_active, input_boolean.bedroom_schedule_active
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sensor.house_occupancy_status
      state: 'on'
    - condition: template
      value_template: '{{ is_state(''input_boolean.''+trigger.entity_id.split(''_'')[1].replace(''boolean.'','''')+''_schedule_active'',
        ''on'')}}'
  action:
  - service: climate.set_temperature
    data_template:
      entity_id: climate.{{trigger.entity_id.split('_')[1].replace('boolean.', '')}}
      temperature: '{{ states(''input_number.''+trigger.entity_id.split(''_'')[1].replace(''boolean.'',
        '''')+''_temperature'') }}'
- id: 'Heating: Turn on when schedule is active and Someone Arrives Home'
  alias: 'Heating: Turn on when schedule is active and Someone Arrives Home'
  trigger:
    platform: state
    entity_id: sensor.house_occupancy_status
    to: 'on'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: input_boolean.vestibule_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.livingroom_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.office_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.kitchen_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.katrin_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.bedroom_schedule_active
      state: 'on'
  action:
    service: notify.squiggley
    data:
      message: Need to work out which rooms we shout turn the heating on in
      title: Heating Automation
- id: 'Heating: Turn off when schedule becomes inactive'
  alias: 'Heating: Turn off when schedule becomes inactive'
  trigger:
    platform: state
    entity_id: input_boolean.vestibule_schedule_active, input_boolean.livingroom_schedule_active,
      input_boolean.office_schedule_active, input_boolean.kitchen_schedule_active,
      input_boolean.katrin_schedule_active, input_boolean.bedroom_schedule_active
    to: 'off'
  action:
  - service: climate.set_temperature
    data_template:
      entity_id: climate.{{ trigger.entity_id.split('_')[1].replace('boolean.', '')}}
      temperature: 7
- id: 'Heating: Turn All Heating off week day nights'
  alias: 'Heating: Turn All Heating off week day nights'
  trigger:
    platform: template
    value_template: '{{ states(''sensor.time'') == (states.input_datetime.heating_all_rooms_week_night_stop.attributes.timestamp
      | int | timestamp_custom(''%H:%M'', False)) }}'
  condition:
    condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - sun
  action:
    service: script.turn_on
    data_template:
      entity_id: script.turn_heating_off
- id: 'Heating: Turn All Heating off weekend nights'
  alias: 'Heating: Turn All Heating off weekend nights'
  trigger:
    platform: template
    value_template: '{{ states(''sensor.time'') == (states.input_datetime.heating_all_rooms_weekend_night_stop.attributes.timestamp
      | int | timestamp_custom(''%H:%M'', False)) }}'
  condition:
    condition: time
    weekday:
    - fri
    - sat
  action:
    service: script.turn_on
    data_template:
      entity_id: script.turn_heating_off
- id: 'Movie Night: Zaphod Movie Playing'
  alias: 'Livingroom Movie Night: Zaphod Movie Playing'
  trigger:
  - entity_id: media_player.zaphod_shield
    platform: state
    to: playing
  condition:
  - condition: state
    entity_id: input_boolean.movie_lighting
    state: 'on'
  action:
  - data:
      brightness_pct: '0'
      entity_id: light.movie_lights
      transition: 5
    service: light.turn_on
  mode: single
- id: 'Movie Night: Movie Ended'
  alias: 'Livingroom: Movie Night: Movie Ended'
  trigger:
  - entity_id: media_player.zaphod_shield
    platform: state
    to: idle
  condition:
  - condition: state
    entity_id: input_boolean.movie_lighting
    state: 'on'
  action:
  - data:
      brightness_pct: '60'
      entity_id: light.movie_lights
      transition: 5
    service: light.turn_on
  mode: single
- id: 'Movie Night: Movie Paused'
  alias: 'Livingroom Movie Night: Movie Paused'
  trigger:
  - entity_id: media_player.zaphod_shield
    from: playing
    platform: state
    to: paused
  condition:
  - condition: state
    entity_id: input_boolean.movie_lighting
    state: 'on'
  action:
  - data:
      brightness_pct: '40'
      entity_id: light.movie_lights
      transition: 2
    service: light.turn_on
  mode: single
- id: 'Zigbee: Enable Zigbee Join'
  alias: 'Zigbee: Enable Zigbee Join'
  trigger:
    platform: state
    entity_id: input_boolean.zigbee_permit_join
    to: 'on'
  action:
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/bridge/config/permit_join
      payload: 'true'
  - service: timer.start
    data:
      entity_id: timer.zigbee_permit_join
- id: 'Zigbee: Disable Zigbee Join'
  alias: 'Zigbee: Disable Zigbee Join'
  trigger:
  - entity_id: input_boolean.zigbee_permit_join
    platform: state
    to: 'off'
  action:
  - data:
      payload: 'false'
      topic: zigbee2mqtt/bridge/config/permit_join
    service: mqtt.publish
  - data:
      entity_id: timer.zigbee_permit_join
    service: timer.cancel
- id: 'Zigbee: Disable Zigbee Join Timer'
  alias: 'Zigbee: Disable Zigbee Join Timer'
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.zigbee_permit_join
  action:
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/bridge/config/permit_join
      payload: 'false'
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.zigbee_permit_join
- id: 'Weather: Sunset Transition'
  alias: 'Weather: Sunset Transition'
  description: Sunset Transition
  trigger:
  - minutes: /2
    platform: time_pattern
    seconds: '0'
  condition:
  - condition: and
    conditions:
    - after: '16:00:00'
      before: '23:00:00'
      condition: time
    - above: 0
      below: 9
      condition: numeric_state
      entity_id: sensor.sun_elevation
    - condition: or
      conditions:
      - condition: template
        value_template: '{{ states.light.dog_lamps.attributes.brightness < (((0.0625*(states.sun.sun.attributes.elevation**2))-(31.125*states.sun.sun.attributes.elevation)+246.5)|int)
          }} '
      - condition: template
        value_template: '{{ states.light.dog_lamps.attributes.brightness==null }} '
  action:
  - data:
      entity_id: light.dog_lamps
    service: light.turn_on
- id: 'Car Defroster: Start Monitoring Temperature'
  alias: 'Car Defroster: Start Monitoring Temperature'
  description: 'Car Defroster: Start Monitoring Temperature'
  trigger:
  - at: 08:11:00
    platform: time
  condition:
  - condition: state
    entity_id: sensor.house_occupancy_status
    state: 'on'
  action:
  - data:
      entity_id: automation.car_defroster_flash_light_if_car_needs_defrosted
    service: automation.turn_on
  mode: single
- id: 'Car Defroster: Flash Light If Car Needs Defrosted'
  alias: 'Car Defroster: Flash Light If Car Needs Defrosted'
  description: 'Car Defroster: Flash Light If Car Needs Defrosted'
  trigger:
  - platform: time_pattern
    seconds: /30
  condition:
  - below: '10'
    condition: numeric_state
    entity_id: sensor.front_garden_temperature
  action:
  - data:
      brightness: '200'
      color: blue
      delay: '01'
      light_id: light.hall_ceiling_one
      transition: '1'
    service: script.pulselight_loop
  mode: single
- id: 'Car Defroster: Stop Monitoring Temperature'
  alias: 'Car Defroster: Stop Monitoring Temperature'
  description: 'Car Defroster: Stop Monitoring Temperature'
  trigger:
  - at: 08:13:00
    platform: time
  condition: []
  action:
  - data:
      entity_id: automation.car_defroster_flash_light_if_car_needs_defrosted
    service: automation.turn_off
  - data: {}
    service: script.pulselight_stop
- id: 'Xmas: Turn On Outside Xmas Lights At Dusk'
  alias: 'Xmas: Turn On Outside Xmas Lights At Dusk'
  trigger:
  - event: sunset
    platform: sun
  condition: []
  action:
  - data:
      entity_id: group.outside_xmas_lights
    service: homeassistant.turn_on
  mode: single
- id: 'Front Door: Turn On Lights When Someone Is At The Front Door'
  alias: 'Front Door: Turn On Lights When Someone Is At The Front Door'
  description: ''
  trigger:
  - device_id: f894d9904a6e4ab68c6aef0c13f66778
    domain: binary_sensor
    entity_id: binary_sensor.external_front_door_motion_sensor_occupancy
    platform: device
    type: motion
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sensor.dark_outside
      state: 'true'
    - condition: state
      entity_id: light.front_door_eve_lights
      state: 'off'
  action:
  - entity_id: light.front_door_eve_lights
    service: light.turn_on
  - delay: 00:05:00
  - entity_id: light.front_door_eve_lights
    service: light.turn_off
- id: 'Bedroom: Turn On Lights When Switch One Clicked'
  alias: 'Bedroom: Turn On Lights When Switch One Clicked'
  description: ''
  trigger:
  - device_id: ae3368569840475b8364e629b48d2632
    domain: binary_sensor
    entity_id: binary_sensor.bedroom_light_switch_one_contact
    platform: device
    type: opened
  - device_id: ae3368569840475b8364e629b48d2632
    domain: binary_sensor
    entity_id: binary_sensor.bedroom_light_switch_one_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - entity_id: light.bedroom_ceiling_one
    service: light.toggle
  - entity_id: light.bedroom_ceiling_two
    service: light.toggle
- id: 'Bedroom: Turn On Lights When Switch Two Clicked'
  alias: 'Bedroom: Turn On Lights When Switch Two Clicked'
  description: ''
  trigger:
  - device_id: 42af7668dbaf4e018ec666b69e105813
    domain: binary_sensor
    entity_id: binary_sensor.bedroom_light_switch_two_contact
    platform: device
    type: opened
  - device_id: 42af7668dbaf4e018ec666b69e105813
    domain: binary_sensor
    entity_id: binary_sensor.bedroom_light_switch_two_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - entity_id: light.bedroom_ceiling_three
    service: light.toggle
  - entity_id: light.bedroom_ceiling_four
    service: light.toggle
  - entity_id: light.bedroom_ceiling_five
    service: light.toggle
- id: 'Hallway: Turn On Lights When Stair Switch One Clicked'
  alias: 'Hallway: Turn On Lights When Stair Switch One Clicked'
  description: ''
  trigger:
  - type: opened
    platform: device
    device_id: f9761d65d25849d29567f604e71ca9a9
    entity_id: binary_sensor.stair_light_switch_one_contact
    domain: binary_sensor
  - type: not_opened
    platform: device
    device_id: f9761d65d25849d29567f604e71ca9a9
    entity_id: binary_sensor.stair_light_switch_one_contact
    domain: binary_sensor
  - type: opened
    platform: device
    device_id: bd4a673abd184a52801844036baf4747
    entity_id: binary_sensor.stair_light_switch_two_contact
    domain: binary_sensor
  - type: not_opened
    platform: device
    device_id: bd4a673abd184a52801844036baf4747
    entity_id: binary_sensor.stair_light_switch_two_contact
    domain: binary_sensor
  condition: []
  action:
  - device_id: 7bfd958291ad430a9d89117ada0a320e
    domain: light
    entity_id: light.stair_ceiling_one
    type: toggle
  - device_id: fd28729701914072b5da80bdf2f030b0
    domain: light
    entity_id: light.stair_ceiling_two
    type: toggle
  - device_id: 2f2a74f5653b4c4582e3779aa394b7b0
    domain: light
    entity_id: light.stair_ceiling_three
    type: toggle
  mode: single
- id: 'Hallway: Turn on Lights When Hallway Light Switch One Clicked'
  alias: 'Hallway: Turn on Lights When Hallway Light Switch One Clicked'
  description: ''
  trigger:
  - device_id: 94ca5f1e866c47f297da24729c703104
    domain: binary_sensor
    entity_id: binary_sensor.hallway_light_switch_one_contact
    platform: device
    type: opened
  - device_id: 94ca5f1e866c47f297da24729c703104
    domain: binary_sensor
    entity_id: binary_sensor.hallway_light_switch_one_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.hall_ceiling
    service: light.toggle
- id: 'Vestibule: Toggle Lights When Switch Clicked'
  alias: 'Vestibule: Toggle Lights When Switch Clicked'
  description: ''
  trigger:
  - device_id: bd211435581d48b8922e598955184b39
    domain: binary_sensor
    entity_id: binary_sensor.vestibule_light_switch_one_contact
    platform: device
    type: opened
  - device_id: bd211435581d48b8922e598955184b39
    domain: binary_sensor
    entity_id: binary_sensor.vestibule_light_switch_one_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - entity_id: light.vestibule_ceiling_lights
    service: light.toggle
- id: 'Logger: Configure Logging Levels'
  alias: 'Logger: Configure Logging Levels'
  description: ''
  trigger:
  - entity_id: input_boolean.core_logging, input_boolean.mqtt_logging, input_boolean.http_logging,
      input_boolean.zwave_logging, input_boolean.light_logging, input_boolean.sensor_logging,
      input_boolean.notify_logging, input_boolean.scripts_logging, input_boolean.climate_logging,
      input_boolean.history_logging, input_boolean.recorder_logging, input_boolean.influxdb_logging,
      input_boolean.automation_logging, input_boolean.media_player_logging, input_boolean.websocket_logging,
      input_boolean.binary_sensor_logging, input_boolean.device_tracker_logging, input_boolean.broadlink_logging,
      input_boolean.media_player_cast_logging, input_boolean.sensor_travisci_logging,
      input_boolean.unifi_direct_logging, input_boolean.heatmiserneo_logging, input_boolean.esphome_logging,
      input_boolean.location_logging
    platform: state
  condition: []
  action:
  - service: logger.set_level
    data_template:
      homeassistant.core: "{% if states.input_boolean.core_logging.state == 'on' %}\n\
        \  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n{% endif\
        \ %}\n"
      homeassistant.components.mqtt: "{% if states.input_boolean.mqtt_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.http: "{% if states.input_boolean.http_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.zwave: "{% if states.input_boolean.zwave_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.light: "{% if states.input_boolean.light_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.sensor: "{% if states.input_boolean.sensor_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.notify: "{% if states.input_boolean.notify_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.scripts: "{% if states.input_boolean.scripts_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.helpers.script: "{% if states.input_boolean.scripts_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.climate: "{% if states.input_boolean.climate_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.history: "{% if states.input_boolean.history_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.recorder: "{% if states.input_boolean.recorder_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.influxdb: "{% if states.input_boolean.influxdb_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.automation: "{% if states.input_boolean.automation_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.media_player: "{% if states.input_boolean.media_player_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.websocket_api: "{% if states.input_boolean.websocket_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.binary_sensor: "{% if states.input_boolean.binary_sensor_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.device_tracker: "{% if states.input_boolean.device_tracker_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.switch.broadlink: "{% if states.input_boolean.broadlink_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.media_player.cast: "{% if states.input_boolean.media_player_cast_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.alarm_control_panel: "{% if states.input_boolean.alarm_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.sensor.travisci: "{% if states.input_boolean.sensor_travisci_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.device_tracker.unifi_direct: "{% if states.input_boolean.unifi_direct_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.components.climate.heatmiserneo: "{% if states.input_boolean.heatmiserneo_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      aioesphomeapi.connection: "{% if states.input_boolean.esphome_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      custom_components.places.sensor: "{% if states.input_boolean.location_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
      homeassistant.helpers.entity_registry: "{% if states.input_boolean.entity_registry_logging.state\
        \ == 'on' %}\n  {{ states.input_select.log_level.state }}\n{% else %}\n  error\n\
        {% endif %}\n"
- id: 'Bathroom: Turn On Lights When Bathroom Switch One Clicked'
  alias: 'Bathroom: Turn On Lights When Bathroom Switch One Clicked'
  description: ''
  trigger:
  - device_id: 0cff8ca9402f4fe2ad16e3be300f7566
    domain: binary_sensor
    entity_id: binary_sensor.bathroom_light_switch_contact
    platform: device
    type: opened
  - device_id: 0cff8ca9402f4fe2ad16e3be300f7566
    domain: binary_sensor
    entity_id: binary_sensor.bathroom_light_switch_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - entity_id: light.bathroom_ceiling_one, light.bathroom_ceiling_two
    service: light.toggle
  mode: single
- id: 'Makeup: Start Timer and Turn On Lights'
  alias: 'Makeup: Start Timer and Turn On Lights'
  description: ''
  trigger:
  - entity_id: input_boolean.makeup_lights
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data_template:
      duration: 00:{{states.input_number.makeup_lights_duration.state | int}}:00
    entity_id: timer.bathroom_makeup_timer
    service: timer.start
  - data:
      brightness_pct: 100
      color_temp: 1
      white_value: 255
    entity_id: light.bathroom_ceiling
    service: light.turn_on
- id: 'Makeup : Stop Timer and Turn Off Switch'
  alias: 'Makeup : Stop Timer and Turn Off Input Boolean'
  description: ''
  trigger:
  - event_data:
      entity_id: timer.bathroom_makeup_timer
    event_type: timer.finished
    platform: event
  condition: []
  action:
  - entity_id: input_boolean.makeup_lights
    service: input_boolean.turn_off
- id: 'Makeup: Reset Lights When Switch Turned Off'
  alias: 'Makeup: Reset Lights When Input Boolean Turned Off'
  description: ''
  trigger:
  - entity_id: input_boolean.makeup_lights
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - data:
      brightness_pct: 50
      color_temp: 350
      white_value: 0
    entity_id: light.bathroom_ceiling
    service: light.turn_on
  - entity_id: timer.bathroom_makeup_timer
    service: timer.cancel
- id: 'Occupancy: Occupancy On'
  alias: 'Occupancy: Occupancy On'
  trigger:
  - platform: numeric_state
    entity_id: sensor.home_occupancy_confidence
    above: 10
  action:
  - service: input_boolean.turn_on
    data:
      entity_id: input_boolean.occupancy
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.nobody_home
- id: 'Occupancy: Occupancy Off'
  alias: 'Occupancy: Occupancy Off'
  trigger:
  - platform: numeric_state
    entity_id: sensor.home_occupancy_confidence
    below: 10
  action:
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.occupancy
  - service: input_boolean.turn_on
    data:
      entity_id: input_boolean.nobody_home
- id: 'Home Assistant: Startup'
  alias: 'Home Assistant: Startup'
  description: Ensure Bedroom lights are off when restarting during the night
  trigger:
  - event: start
    platform: homeassistant
  condition:
  - after: '23:00:00'
    before: 09:00:00
    condition: time
  action:
  - data: {}
    entity_id: light.bedroom_ceiling
    service: light.turn_off
  - data: {}
    entity_id: light.bedroom_lamps
    service: light.turn_off
- id: 'Bedroom: Turn On Night Light And Start Timer When Boolean On'
  alias: 'Bedroom: Night Light Turn On And Start Timer When Boolean On'
  description: ''
  trigger:
  - entity_id: input_boolean.night_light_stripper
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      duration: 00:{{ states.input_number.night_light_duration.state | int }}:00
    entity_id: timer.night_light_timer
    service: timer.start
  - service: light.turn_on
    data_template:
      entity_id: light.nightlight_stripper
      brightness_pct: '{{ states.input_number.night_light_brightness.state | float}}'
  mode: single
- id: 'Bedroom: Turn Off Night Light And Cancel Timer When Boolean Off'
  alias: 'Bedroom: Night Light Turn Off And Cancel Timer When Boolean Off'
  description: ''
  trigger:
  - entity_id: input_boolean.night_light_stripper
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - entity_id: timer.night_light_timer
    service: timer.cancel
  - type: turn_off
    device_id: bc9656327c014f8281eb88f248967af6
    entity_id: light.nightlight_stripper
    domain: light
  mode: single
- id: 'Motion Detected: Back Door Cameras'
  alias: 'Motion Detected: Back Door Cameras'
  description: The back door camera has detected movement
  trigger:
  - platform: webhook
    webhook_id: squirrel-detective
  condition:
  - condition: and
    conditions:
    - condition: device
      device_id: aab5c48942784889a94b3ef3936903ec
      domain: binary_sensor
      entity_id: binary_sensor.back_door_sensor_contact
      type: is_not_open
    - condition: state
      entity_id: input_boolean.squirrel_notifications
      state: 'on'
  action:
  - data:
      message: Squirrel alert!
    entity_id: media_player.kitchen_speaker, media_player.office_display
    service: tts.google_say
  - data:
      message: Possible Squirrel Sighting - Back Door
    service: notify.everyone
  mode: queued
  max: 10
- id: 'Motion Detection: Back Climbing Frame Camera'
  alias: 'Motion Detection: Back Climbing Frame Camera'
  description: Motion has been detected on the the back garden climbing frame
  trigger:
  - platform: webhook
    webhook_id: climbing-frame
  condition:
  - condition: and
    conditions:
    - condition: device
      device_id: dceee7e1a04b48c0ae64bc6c52d88a72
      domain: binary_sensor
      entity_id: binary_sensor.katrin_window_sensor_one_contact
      type: is_not_open
    - condition: device
      device_id: 6e2f72de62de4465b23e7c666e7fbaab
      domain: binary_sensor
      entity_id: binary_sensor.katrin_window_sensor_two_contact
      type: is_not_open
    - condition: device
      device_id: aab5c48942784889a94b3ef3936903ec
      domain: binary_sensor
      entity_id: binary_sensor.back_door_sensor_contact
      type: is_not_open
    - condition: state
      entity_id: input_boolean.squirrel_notifications
      state: 'on'
  action:
  - data:
      message: Possible Squirrel Sighting - Back Climbing Frame
    entity_id: media_player.kitchen_speaker, media_player.office_display
    service: tts.google_say
  - data:
      message: Possible Squirrel Sighting - Back Climbing Frame
    service: notify.everyone
  mode: queued
  max: 10
- id: 'Motion Detected: Garage Roof Camera'
  alias: 'Motion Detected: Garage Roof Camera'
  description: Motion has been detected by the garage roof camera
  trigger:
  - platform: webhook
    webhook_id: squirrel-finder
  condition:
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: 'on'
  action:
  - data:
      message: Possible Squirrel Sighting - Garage Roof
    service: notify.squiggley
  mode: queued
  max: 10
- id: 'Motion Detected: Front Garden Camera'
  alias: 'Motion Detected: Front Garden Camera'
  description: The front garden camera has detected movement
  trigger:
  - platform: webhook
    webhook_id: front-garden-detective
  condition:
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: 'on'
  action:
  - data:
      message: Possible Squirrel Sighting - Front Garden
    service: notify.squiggley
  - data:
      message: Possible Squirrel Sighting - Front Garden
    entity_id: media_player.kitchen_speaker, media_player.office_display
    service: tts.google_say
  mode: single
- id: 'Notifications: Turn Off Squirrel Notifications when back door is opened'
  alias: 'Notifications: Turn Off Squirrel Notifications when back door is opened'
  description: ''
  trigger:
  - device_id: aab5c48942784889a94b3ef3936903ec
    domain: binary_sensor
    entity_id: binary_sensor.back_door_sensor_contact
    platform: device
    type: opened
  condition: []
  action:
  - entity_id: input_boolean.squirrel_notifications
    service: input_boolean.turn_off
  mode: single
- id: 'Notifications: Turn On Squirrel Notifications when back door is Closed'
  alias: 'Notifications: Turn On Squirrel Notifications when back door is Closed'
  description: ''
  trigger:
  - device_id: aab5c48942784889a94b3ef3936903ec
    domain: binary_sensor
    entity_id: binary_sensor.back_door_sensor_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: input_boolean.squirrel_notifications
    service: input_boolean.turn_on
  mode: single
- id: 'Kitchen: Turn on Main Ceiling When Kitchen Main Switch Clicked'
  alias: 'Kitchen: Turn on Main Ceiling When Kitchen Main Switch Clicked'
  description: ''
  trigger:
  - device_id: d085b281724243148cc4b1aab8ff177d
    domain: binary_sensor
    entity_id: binary_sensor.kitchen_main_switch_contact
    platform: device
    type: opened
  - device_id: d085b281724243148cc4b1aab8ff177d
    domain: binary_sensor
    entity_id: binary_sensor.kitchen_main_switch_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.main_ceiling, light.cooking_ceiling
    service: light.toggle
  mode: single
- id: 'Kitchen: Turn on Table Ceiling When Dining Switch One Clicked'
  alias: 'Kitchen: Turn on Dining Ceiling When Dining Switch One Clicked'
  description: ''
  trigger:
  - device_id: fc22b75230744301a7f7a7ee543f9d3d
    domain: binary_sensor
    entity_id: binary_sensor.kitchen_dining_switch_contact
    platform: device
    type: opened
  - device_id: fc22b75230744301a7f7a7ee543f9d3d
    domain: binary_sensor
    entity_id: binary_sensor.kitchen_dining_switch_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.dining_ceiling
    service: light.toggle
  mode: single
- id: 'Kitchen: Turn on Bench Ceiling When Bench Switch Clicked'
  alias: 'Kitchen: Turn on Bench Ceiling When Bench Switch Clicked'
  description: ''
  trigger:
  - device_id: 0f18c8d345954170afdb32d490624b41
    domain: binary_sensor
    entity_id: binary_sensor.kitchen_bench_switc_contact
    platform: device
    type: opened
  - device_id: 0f18c8d345954170afdb32d490624b41
    domain: binary_sensor
    entity_id: binary_sensor.kitchen_bench_switc_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.bench_ceiling
    service: light.toggle
  mode: single
- id: 'Toilet: Turn on Toilet Ceiling When Toilet Switch Clicked'
  alias: 'Toilet: Turn on Toilet Ceiling When Toilet Switch Clicked'
  description: ''
  trigger:
  - device_id: db723dcc70ec430c8ab9ac232b380e34
    domain: binary_sensor
    entity_id: binary_sensor.toilet_light_switch_contact
    platform: device
    type: opened
  - device_id: db723dcc70ec430c8ab9ac232b380e34
    domain: binary_sensor
    entity_id: binary_sensor.toilet_light_switch_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.toilet_ceiling
    service: light.toggle
  mode: single
- id: 'Office: Turn on Office Ceiling One & Four When Office Switch One Clicked'
  alias: 'Office: Turn on Office Ceiling One & Four When Office Switch One Clicked'
  description: ''
  trigger:
  - device_id: a4663e3d1a114e38a9ac9f3bcc01a71f
    domain: binary_sensor
    entity_id: binary_sensor.office_switch_one_contact
    platform: device
    type: opened
  - device_id: a4663e3d1a114e38a9ac9f3bcc01a71f
    domain: binary_sensor
    entity_id: binary_sensor.office_switch_one_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.office_ceiling_one, light.office_ceiling_four
    service: light.toggle
  mode: single
- id: 'Office: Turn on Office Ceiling Two & Three When Office Switch Two Clicked'
  alias: 'Office: Turn on Office Ceiling Two & Three When Office Switch Two Clicked'
  description: ''
  trigger:
  - device_id: 1c942e300361423dbb3383b730ba3d07
    domain: binary_sensor
    entity_id: binary_sensor.office_switch_two_contact
    platform: device
    type: opened
  - device_id: 1c942e300361423dbb3383b730ba3d07
    domain: binary_sensor
    entity_id: binary_sensor.office_switch_two_contact
    platform: device
    type: not_opened
  condition: []
  action:
  - data: {}
    entity_id: light.office_ceiling_two, light.office_ceiling_three
    service: light.toggle
  mode: single
- id: 'Livingroom: Turn On/Off TV, Amp, Kodi, Ambi-lighting and Table Lamps'
  alias: 'Livingroom: Turn On/Off TV, Amp, Kodi, Ambi-lighting and Table Lamps'
  description: ''
  trigger:
  - device_id: 60bfcd32d4af42a7a1b181215ca951cc
    discovery_id: 0x00158d0001f3e05e click_single
    domain: mqtt
    platform: device
    subtype: single
    type: click
  condition: []
  action:
  - data: {}
    entity_id: input_boolean.stupid_box
    service: input_boolean.toggle
  mode: single
- id: 'CCTV: Motion detected in the Back Door Camera'
  alias: 'CCTV: Motion detected in the Back Door Camera'
  description: Motion has been detected at the back door
  trigger:
  - platform: webhook
    webhook_id: BlueIris-BackDoorCamera
  condition:
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: ''
  action:
  - service: notify.everyone
    data:
      message: Check for a squirrel at the back door
      title: Back Door Camera
  mode: single
- id: 'CCTV: Motion Detected by Front Climbing Camera'
  alias: 'CCTV: Motion Detected by Front Climbing Camera'
  description: Motion has been detected in or around the climbing frame infront of
    the office
  trigger:
  - platform: webhook
    webhook_id: BlueIris-FrontClimbingFrame
  condition:
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: 'on'
  action:
  - service: notify.squiggley
    data:
      message: Check for a squirrel at the front climbing frame
      title: Climbing Frame Camera
  mode: single
- id: 'Livingroom: Turn on room when Zaphod powered on'
  alias: 'Livingroom: Turn on room when Zaphod powered on'
  description: ''
  trigger:
  - platform: state
    entity_id: media_player.zaphod_shield
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: media_player.turn_on
    data: {}
    entity_id: media_player.squiggley_amp
  - service: light.turn_on
    data: {}
    entity_id: light.livingroom_lamps
  - service: input_boolean.turn_on
    entity_id: input_boolean.movie_lighting
  mode: single
- id: 'CCTV: Motion Detected by Front Garden Camera'
  alias: 'CCTV: Motion Detected by Front Garden Camera'
  description: Motion has been detected in the front garden somewhere
  trigger:
  - platform: webhook
    webhook_id: BlueIris-FrontGardenCamera
  condition:
  - type: is_not_open
    condition: device
    device_id: d846cb762caf45b5afebc930179c9633
    entity_id: binary_sensor.front_door_sensor_contact
    domain: binary_sensor
  - condition: state
    entity_id: input_boolean.squirrel_notifications
    state: 'on'
  action:
  - service: notify.squiggley
    data:
      message: Check for a squirrel in the front garden
      title: Front Garden Camera
  mode: single
- id: 'CCTV: Motion detected in the Back Climbing Camera'
  alias: 'CCTV: Motion detected in the Back Climbing Camera'
  description: Motion has been detected on the back climbing frame
  trigger:
  - platform: webhook
    webhook_id: BlueIris-BackClimbingCamera
  condition: []
  action:
  - service: notify.everyone
    data:
      message: Check for a squirrel on the back climbing frame
      title: Back Climbing Camera
  mode: single
- id: 'CCTV: Motion detected From Garage Roof Camera'
  alias: 'CCTV: Motion detected From Garage Roof Camera'
  description: Motion has been detected by the garage roof camera
  trigger:
  - platform: webhook
    webhook_id: BlueIris-GarageRoofCamera
  condition:
  - condition: state
    entity_id: persistent_notification.config_entry_discovery
    state: 'on'
  action:
  - service: notify.everyone
    data:
      message: Check for a squirrel wherever the garage roof camera is pointing
      title: Garage Roof Camera
  mode: single
- id: 'Bedroom : Night Light Turn On Boolean when Motion is Detected'
  alias: 'Bedroom : Night Light Turn On Boolean when Motion is Detected'
  description: ''
  trigger:
  - type: motion
    platform: device
    device_id: 822656699269482e9e2b446f8689f43c
    entity_id: binary_sensor.squiggley_nightlight_motion_sensor_occupancy
    domain: binary_sensor
  - type: motion
    platform: device
    device_id: 34bc52dde87e40fc880a0095e7ebc56a
    entity_id: binary_sensor.wee_bear_nightlight_motion_sensor_occupancy
    domain: binary_sensor
  condition: []
  action:
  - service: input_boolean.turn_on
    data: {}
    entity_id: input_boolean.night_light_stripper
  mode: single
- id: Send Notification for Home Assistant Alert
  alias: Send Notification for Home Assistant Alert
  description: ''
  use_blueprint:
    path: CentralCommand/get-notified-any-time-there-is-a-new-home-assistant-alert.yaml
    input:
      notifier: squiggley
- id: 'DoorBell: Flash Lights when Boolean is true'
  alias: 'DoorBell: Flash Lights when Boolean is true'
  description: ''
  use_blueprint:
    path: myGithub-Markus/flashing_lights.yaml
    input:
      delay: '1000'
      activated: input_boolean.doorbell_flash_lights
      target_lights:
        entity_id: light.front_door_eve_lights
- id: 'DoorBell: Notify House and Flash Eve Lights when DoorBell Rung'
  alias: 'DoorBell: Notify House and Flash Eve Lights when DoorBell Rung'
  description: ''
  trigger:
  - platform: device
    domain: mqtt
    device_id: 636f806552514475b3866b28c3a86b14
    type: click
    subtype: single
    discovery_id: 0x00158d0002f99b2b click_single
  - platform: device
    domain: mqtt
    device_id: 636f806552514475b3866b28c3a86b14
    type: click
    subtype: double
    discovery_id: 0x00158d0002f99b2b click_double
  - platform: device
    domain: mqtt
    device_id: 636f806552514475b3866b28c3a86b14
    type: action
    subtype: hold
    discovery_id: 0x00158d0002f99b2b action_hold
  condition: []
  action:
  - service: tts.google_say
    entity_id: media_player.office_display
    data:
      message: There is somebody at the front door!!
  - service: tts.google_say
    entity_id: media_player.kitchen_speaker
    data:
      message: There is somebody at the front door!!
  - service: tts.google_say
    entity_id: media_player.livingroom_speaker
    data:
      message: There is somebody at the front door!!
  - service: tts.google_say
    entity_id: media_player.office_speaker
    data:
      message: There is somebody at the front door!!
  - service: notify.squiggley
    data:
      message: There is somebody at the front door!
  - service: input_boolean.turn_on
    data: {}
    entity_id: input_boolean.doorbell_flash_lights
  - delay: 00:00:3
  - service: input_boolean.turn_off
    data: {}
    entity_id: input_boolean.doorbell_flash_lights
  mode: single
