- id: 'Rubbish: Update Bin Night Sensors'
  alias: 'Rubbish: Update Bin Night Sensors'
  trigger:
  - event: start
    platform: homeassistant
  - hours: /1
    platform: time_pattern
  action:
  - entity_id: sensor.recycling_bin_today, sensor.recycling_bin_tomorrow, sensor.landfill_bin_today,
      sensor.landfill_bin_tomorrow, sensor.garden_bin_today, sensor.garden_bin_tomorrow
    service: homeassistant.update_entity
- id: 'Rubbish: Calculate Bin Reminders'
  alias: 'Rubbish: Calculate Bin Reminders'
  trigger:
  - at: '19:00:00'
    platform: time
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ now().strftime("%H:%M") == "19:00" and now().weekday() ==
        1 }}'
    - condition: or
      conditions:
      - condition: state
        entity_id: sensor.recycling_bin_today
        state: 'True'
      - condition: state
        entity_id: sensor.landfill_bin_today
        state: 'True'
  action:
  - data_template:
      message: "'{%- if (states.sensor.recycling_bin_today.state) == \"True\" -%}\
        \ \n  Recycling Bin Night \n {%- elif (states.sensor.landfill_bin_today.state)\
        \ == \"True\" -%}\n   Landfill Bin Tonight \n {%- endif -%}\n {%- if (states.sensor.garden_bin_today.state)\
        \ == \"True\" -%}\n   Garden Bin Tonight \n {%- endif -%}'"
      title: Bins Out Tonight
    service: notify.everyone
  initial_state: 'true'
- id: 'Bedroom: Turn On Nightlight When Dark'
  alias: 'Bedroom: Turn On Nightlight When Dark'
  trigger:
  - entity_id: binary_sensor.squiggley_nightlight_motion_sensor
    from: 'off'
    platform: state
    to: 'on'
  - entity_id: binary_sensor.wee_bear_nightlight_motion_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      entity_id: light.nightlight_stripper
    service: light.turn_on
  - delay: 00:05:00
  - data:
      entity_id: light.nightlight_stripper
    service: light.turn_off
- id: 'Bedroom: Light Wee Bears Wardrobe When The Door Opens'
  alias: 'Bedroom: Light Wee Bears Wardrobe When The Door Opens'
  trigger:
  - entity_id: binary_sensor.large_wardrobe_one_motion_sensor
    from: 'off'
    platform: state
    to: 'on'
  - entity_id: binary_sensor.large_wardrobe_two_motion_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: light.large_wardrobe_stripper
    state: 'off'
  action:
  - data:
      entity_id: light.large_wardrobe_stripper
    service: light.turn_on
  - delay: 00:10:00
  - data:
      entity_id: light.large_wardrobe_stripper
    service: light.turn_off
- id: 'Bedroom: Light Squiggleys Wardrobe When The Door Opens'
  alias: 'Bedroom: Light Squiggleys Wardrobe When The Door Opens'
  trigger:
  - entity_id: binary_sensor.small_wardrobe_motion_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      entity_id: light.small_wardrobe_stripper
    service: light.turn_on
  - delay: 00:05:00
  - data:
      entity_id: light.small_wardrobe_stripper
    service: light.turn_off
- id: 'Bedroom: Turn House Off When Button Pressed'
  alias: 'Bedroom: Turn House Off When Button Pressed'
  description: Turn the whole house off when button pressed
  trigger:
  - entity_id: binary_sensor.home_off_switch
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - service: script.home_off
  - service: input_boolean.turn_on
    data_template:
      entity_id: input_boolean.everyone_sleeping
- id: 'Occupancy: Turn On Garden Lights At Dusk'
  alias: 'Occupancy: Turn On Garden Lights At Dusk'
  trigger:
  - event: sunset
    offset: 01:00:00
    platform: sun
  condition: []
  action:
  - data:
      entity_id: light.front_garden_light
    service: light.turn_on
- id: 'Occupancy: Turn On Lights When Dark and Someone Is Home'
  alias: 'Occupancy: Turn On Lights When Dark and Someone Is Home'
  trigger:
  - minutes: /1
    platform: time_pattern
  condition:
  - condition: state
    entity_id: input_boolean.everyone_sleeping
    state: 'off'
  - below: '400'
    condition: numeric_state
    entity_id: sensor.gateway_illumination_sensor
  - condition: state
    entity_id: sensor.house_occupancy_status
    state: 'on'
  - after: 07:00:00
    before: '23:00:00'
    condition: time
  - condition: state
    entity_id: group.common_lights
    state: 'off'
  action:
  - data:
      entity_id: group.common_lights
    service: homeassistant.turn_on
- id: 'Occupancy: Turn Everything Off When Everyone Leaves'
  alias: 'Occupancy: Turn Everything Off When Everyone Leaves'
  trigger:
  - entity_id: sensor.house_occupancy_status
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - data: {}
    service: script.home_off
  - data:
      message: Turning everything Off as nobody does be home
    service: notify.squiggley
- id: 'Occupancy: Turn On the Common Lights When Someone Opens the Front Door'
  alias: 'Occupancy: Turn On the Common Lights When Someone Opens the Front Door'
  trigger:
  - entity_id: binary_sensor.front_door_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - below: '400'
    condition: numeric_state
    entity_id: sensor.gateway_illumination_sensor
  action:
  - condition: state
    entity_id: group.common_lights
    state: 'off'
  - data:
      entity_id: group.common_lights
    service: homeassistant.turn_on
  - delay: 00:10:00
  - data:
      entity_id: group.common_lights
    service: homeassistant.turn_off
- id: 'Occupancy: Announce Arrive/Leave Home'
  alias: 'Occupancy: Announce Arrive/Leave Home'
  trigger:
  - entity_id: device_tracker.claires_iphone_2, device_tracker.squigglepad_2
    from: not_home
    platform: state
    to: home
  - entity_id: device_tracker.claires_iphone_2, device_tracker.squigglepad_2
    from: home
    platform: state
    to: not_home
  action:
  - service: notify.squiggley
    data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} is {% if trigger.to_state.state
        == ''home'' %}back{% else %}away{% endif %}.

        '
      title: ''
  - service: tts.google_translate_say
    entity_id: media_player.office_speaker
    data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} is {% if trigger.to_state.state
        == ''home'' %}back{% else %}away{% endif %}.

        '
- id: 'Occupancy: Dev : Send message on location updates'
  alias: 'Occupancy: Dev : Send message on location updates'
  trigger:
  - entity_id: device_tracker.claires_iphone_2, device_tracker.squigglepad_2
    platform: state
  action:
  - service: notify.squiggley
    data_template:
      message: "{% if trigger.from_state.state != trigger.to_state.state %}\n  Update\
        \ from {{ trigger.to_state.attributes.friendly_name }} - state changed from\
        \ {{ trigger.from_state.state }} to {{ trigger.to_state.state }} Old Lattitude\
        \ = Latitude = {{ trigger.from_state.attributes.latitude }} New latitude =\
        \ Latitude = {{ trigger.to_state.attributes.latitude }}\n{% elif trigger.from_state.state\
        \ == trigger.to_state.state %}\n  {{ trigger.to_state.attributes.friendly_name\
        \ }} no state change. Latitude = {{ trigger.to_state.attributes.latitude }}\n\
        {% endif %}\n"
- id: 'Server: Turn On The Fan When Its Hot'
  alias: 'Server: Turn On Fan When Its Hot'
  trigger:
  - platform: template
    value_template: '{{ states(''sensor.server_room_temperature'') |float > states(''input_number.server_fan_on_temperature'')|
      float}}'
  action:
  - data:
      entity_id: switch.server_fan_relay
    service: switch.turn_on
- id: 'Server: Turn Off The Server Fan When It Has Cooled'
  alias: 'Server: Turn Off The Server Fan When It Has Cooled'
  trigger:
  - platform: template
    value_template: '{{ states(''sensor.server_room_temperature'') |float < states(''input_number.server_fan_off_temperature'')|
      float}}'
  action:
  - data:
      entity_id: switch.server_fan_relay
    service: switch.turn_off
- id: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap One'
  alias: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap One'
  trigger:
  - entity_id: binary_sensor.mouse_trap_one
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      message: There's a moose been caught aboot this hoose! Trap One
    service: notify.squiggley
- id: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap Two'
  alias: 'Mousetrap: Notify Squiggley When a Mouse is Caught in Trap Two'
  trigger:
  - entity_id: binary_sensor.mouse_trap_two
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      message: There's a moose been caught aboot this hoose! Trap Two
    service: notify.squiggley
- id: 'Toilet: Turn On Lights When Motion Detected'
  alias: 'Toilet: Turn On Lights When Motion Detected'
  trigger:
  - platform: state
    entity_id: binary_sensor.toilet_motion_sensor
    to: 'on'
  action:
  - service: timer.start
    entity_id: timer.toilet_lights
  - service: light.turn_on
    entity_id: light.toilet_lights
- id: 'Toilet: Stop Toilet Lights Timer When Door is Closed'
  alias: 'Toilet: Stop Toilet Lights Timer When Door is Closed'
  trigger:
  - entity_id: binary_sensor.toilet_door_sensor
    from: 'on'
    platform: state
    to: 'off'
  condition:
  - condition: state
    entity_id: light.toilet_lights
    state: 'on'
  action:
  - entity_id: timer.toilet_lights
    service: timer.cancel
- id: 'Toilet: Start Toilet Lights Timer When Door is Opened'
  alias: 'Toilet: Start Toilet Lights Timer When Door is Opened'
  trigger:
  - entity_id: binary_sensor.toilet_door_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: light.toilet_lights
    state: 'on'
  action:
  - entity_id: timer.toilet_lights
    service: timer.start
- id: 'Toilet: Turn off lights at end of timer'
  alias: 'Toilet: Turn off lights at end of timer'
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.toilet_lights
  action:
    service: light.turn_off
    entity_id: light.toilet_lights
- id: 'Vestibule: Turn On Lights When Motion Is Detected'
  alias: 'Vestibule: Turn On Lights When Motion Is Detected'
  trigger:
  - entity_id: binary_sensor.vestibule_motion_sensor
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: light.vestibule_one
    state: 'off'
  action:
  - data:
      entity_id: light.Vestibule_One
    service: light.turn_on
  - delay: 00:005:00
  - data:
      entity_id: light.Vestibule_One
    service: light.turn_off
- id: 'Slow Cooker: Turn On at specified time'
  alias: 'Slow Cooker: Turn On at specified time'
  trigger:
  - platform: template
    value_template: '{{ states.sensor.time.state == (states.input_datetime.slow_cooker_start.attributes.timestamp
      | int | timestamp_custom("%H:%M", False)) }}'
  condition:
  - condition: state
    entity_id: input_boolean.slow_cooker_timer
    state: 'on'
  action:
  - data:
      entity_id: switch.slow_cooker_relay
    service: switch.turn_on
  - data:
      message: Turning on the slow cooker
    service: notify.squiggley
- id: 'Slow Cooker: Turn Off Slow Cooker at specified time'
  alias: 'Slow Cooker: Turn Off Slow Cooker at specified time'
  trigger:
  - platform: template
    value_template: '{{ states.sensor.time.state == (states.input_datetime.slow_cooker_stop.attributes.timestamp
      | int | timestamp_custom("%H:%M", False)) }}'
  action:
  - service: switch.turn_off
    data:
      entity_id: switch.slow_cooker_relay
  - service: notify.squiggley
    data:
      message: Turning off the slow cooker
- id: 'Livingroom: Moron Machine On/Off'
  alias: 'Livingroom: Moron Machine On/Off'
  description: For Google Assistant to be able to turn the moron machine on or off
  trigger:
    platform: state
    entity_id: input_boolean.moron_machine
  action:
    service: script.turn_on
    data_template:
      entity_id: "{% if is_state('sensor.moron_machine_status', 'on') %}\n  script.deactivate_moron_machine\n\
        {% elif is_state('sensor.moron_machine_status', 'off') %}\n  script.activate_moron_machine\n\
        {% endif %}\n"
- id: 'Livingroom: Toggle On/Off'
  alias: 'Livingroom: Toggle On/Off'
  description: Turns on the tv, amp, kodi, ambilighting and eventually lights
  trigger:
    platform: state
    entity_id: binary_sensor.livingroom_on_off_switch
  condition: []
  action:
    service: script.turn_on
    data_template:
      entity_id: "{% if is_state('sensor.moron_machine_status', 'on') %}\n  script.deactivate_moron_machine\n\
        {% else %}\n  script.activate_moron_machine\n{% endif %}\n"
- id: 'Heating: Active/deactivate heating schedule for room'
  alias: 'Heating: Active/deactivate heating schedule for room'
  trigger:
  - platform: state
    entity_id: sensor.vestibule_heating_on, sensor.vestibule_heating_off, sensor.livingroom_heating_on,
      sensor.livingroom_heating_off, sensor.office_heating_on, sensor.office_heating_off,
      sensor.kitchen_heating_on, sensor.kitchen_heating_off, sensor.katrin_heating_on,
      sensor.katrin_heating_off, sensor.bedroom_heating_on, sensor.bedroom_heating_off
    to: 'True'
  action:
    service_template: input_boolean.turn_{{ trigger.entity_id.split('_')[-1] }}
    data_template:
      entity_id: "{% if trigger.entity_id.split('_')[2] == 'on'  %}\n  input_boolean.{{\
        \ trigger.entity_id.split('.')[1].replace('heating_on', 'schedule_active')\
        \ }}\n{% else %}\n  input_boolean.{{ trigger.entity_id.split('.')[1].replace('heating_off',\
        \ 'schedule_active') }}\n{% endif %}\n"
- id: 'Heating: Turn on when schedule is active and house is occupied'
  alias: 'Heating: Turn on when schedule is active and house is occupied'
  trigger:
    platform: state
    entity_id: input_boolean.vestibule_schedule_active, input_boolean.livingroom_schedule_active,
      input_boolean.office_schedule_active, input_boolean.kitchen_schedule_active,
      input_boolean.katrin_schedule_active, input_boolean.bedroom_schedule_active
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sensor.house_occupancy_status
      state: 'on'
    - condition: template
      value_template: '{{ is_state(''input_boolean.''+trigger.entity_id.split(''_'')[1].replace(''boolean.'','''')+''_schedule_active'',
        ''on'')}}

        '
  action:
  - service: climate.set_temperature
    data_template:
      entity_id: climate.{{trigger.entity_id.split('_')[1].replace('boolean.', '')}}
      temperature: '{{ states(''input_number.''+trigger.entity_id.split(''_'')[1].replace(''boolean.'',
        '''')+''_temperature'') }}'
  - service: notify.squiggley
    data_template:
      message: Activated by schedule {{trigger.entity_id.split('_')[1].replace('boolean.',
        '')}} to {{ states('input_number.'+trigger.entity_id.split('_')[1].replace('boolean.',
        '')+'_temperature') }}
- id: 'Heating: Turn on when schedule is active and Someone Arrives Home'
  alias: 'Heating: Turn on when schedule is active and Someone Arrives Home'
  trigger:
    platform: state
    entity_id: sensor.house_occupancy_status
    to: 'on'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: input_boolean.vestibule_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.livingroom_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.office_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.kitchen_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.katrin_schedule_active
      state: 'on'
    - condition: state
      entity_id: input_boolean.bedroom_schedule_active
      state: 'on'
  action:
    service: notify.squiggley
    data:
      message: Need to work out which rooms we shout turn the heating on in
      title: Heating Automation
- id: 'Heating: Turn off when schedule becomes inactive'
  alias: 'Heating: Turn off when schedule becomes inactive'
  trigger:
    platform: state
    entity_id: input_boolean.vestibule_schedule_active, input_boolean.livingroom_schedule_active,
      input_boolean.office_schedule_active, input_boolean.kitchen_schedule_active,
      input_boolean.katrin_schedule_active, input_boolean.bedroom_schedule_active
    to: 'off'
  action:
  - service: climate.set_temperature
    data_template:
      entity_id: climate.{{ trigger.entity_id.split('_')[1].replace('boolean.', '')}}
      temperature: 7
  - service: notify.squiggley
    data_template:
      message: Deactivated by schedule {{trigger.entity_id.split('_')[1].replace('boolean.',
        '')}} to 7 }}
- id: 'Heating: Turn All Heating off week day nights'
  alias: 'Heating: Turn All Heating off week day nights'
  trigger:
    platform: template
    value_template: '{{ states(''sensor.time'') == (states.input_datetime.heating_all_rooms_week_night_stop.attributes.timestamp
      | int | timestamp_custom(''%H:%M'', False)) }}'
  condition:
    condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - sun
  action:
    service: script.turn_on
    data_template:
      entity_id: script.turn_heating_off
- id: 'Heating: Turn All Heating off weekend nights'
  alias: 'Heating: Turn All Heating off weekend nights'
  trigger:
    platform: template
    value_template: '{{ states(''sensor.time'') == (states.input_datetime.heating_all_rooms_weekend_night_stop.attributes.timestamp
      | int | timestamp_custom(''%H:%M'', False)) }}'
  condition:
    condition: time
    weekday:
    - fri
    - sat
  action:
    service: script.turn_on
    data_template:
      entity_id: script.turn_heating_off
- id: 'Movie Night: Marvin Movie Playing'
  alias: 'Movie Night: Marvin Movie Playing'
  trigger:
  - entity_id: media_player.marvin
    platform: state
    to: playing
  condition: 
    condition: state
    entity_id: input_boolean.movie_lighting
    state: 'on'
  action:
  - service: light.turn_on
    data:
      brightness_pct: '0'
      transition: 5
      entity_id: light.movie_lights
- id: 'Movie Night: Movie Ended'
  alias: 'Movie Night: Movie Ended'
  trigger:
  - entity_id: media_player.marvin
    platform: state
    to: idle
  condition: 
    condition: state
    entity_id: input_boolean.movie_lighting
    state: 'on'
  action:
  - service: light.turn_on
    data:
      brightness_pct: '75'
      transition: 3
      entity_id: light.movie_lights
- id: 'Movie Night: Movie Paused'
  alias: 'Movie Night: Movie Paused'
  trigger:
  - entity_id: media_player.marvin
    from: playing
    platform: state
    to: paused
  condition: 
    condition: state
    entity_id: input_boolean.movie_lighting
    state: 'on'
  action:
  - service: light.turn_on
    data:
      brightness_pct: '40'
      transition: 2
      entity_id: light.movie_lights
- id: 'Zigbee: Enable Zigbee Join'
  alias: 'Zigbee: Enable Zigbee Join'
  hide_entity: true
  trigger:
    platform: state
    entity_id: input_boolean.zigbee_permit_join
    to: 'on'
  action:
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/bridge/config/permit_join
      payload: 'true'
  - service: timer.start
    data:
      entity_id: timer.zigbee_permit_join
- id: 'Zigbee: Disable Zigbee Join'
  alias: 'Zigbee: Disable Zigbee Join'
  trigger:
  - entity_id: input_boolean.zigbee_permit_join
    platform: state
    to: 'off'
  action:
  - data:
      payload: 'false'
      topic: zigbee2mqtt/bridge/config/permit_join
    service: mqtt.publish
  - data:
      entity_id: timer.zigbee_permit_join
    service: timer.cancel
  hide_entity: true
- id: 'Zigbee: Disable Zigbee Join Timer'
  alias: 'Zigbee: Disable Zigbee Join Timer'
  hide_entity: true
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.zigbee_permit_join
  action:
  - service: mqtt.publish
    data:
      topic: zigbee2mqtt/bridge/config/permit_join
      payload: 'false'
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.zigbee_permit_join
- id: Sunset Transition
  alias: Sunset Transition
  description: Sunset Transition
  trigger:
  - platform: time_pattern
    minutes: /2
    seconds: 0
  condition:
    condition: and
    conditions:
    - condition: time
      after: '16:00:00'
      before: '23:00:00'
    - condition: numeric_state
      entity_id: sensor.sun_elevation
      above: '0'
      below: '9'
    - condition: or
      conditions:
      - condition: template
        value_template: '{{ states.light.dog_lamps.attributes.brightness < (((0.0625*(states.sun.sun.attributes.elevation**2))-(31.125*states.sun.sun.attributes.elevation)+246.5)|int)
          }} '
      - condition: template
        value_template: '{{ states.light.dog_lamps.attributes.brightness==null }} '
  action:
  - data:
      entity_id: light.dog_lamps
    service: light.turn_on
- id: 'Car Defroster: Start Monitoring Temperature'
  alias: 'Car Defroster: Start Monitoring Temperature'
  description: 'Car Defroster: Start Monitoring Temperature'
  trigger:
  - at: 08:11
    platform: time
  condition:
  - condition: state
    entity_id: sensor.house_occupancy_status
    state: 'on'
  action:
  - data:
      entity_id: automation.car_defroster_flash_light_if_car_needs_defrosted
    service: automation.turn_on
- id: 'Car Defroster: Flash Light If Car Needs Defrosted'
  alias: 'Car Defroster: Flash Light If Car Needs Defrosted'
  description: 'Car Defroster: Flash Light If Car Needs Defrosted'
  trigger:
  - platform: time_pattern
    seconds: /30
  condition:
  - below: '10'
    condition: numeric_state
    entity_id: sensor.front_garden_temperature
  action:
  - data:
      brightness: '200'
      color: blue
      delay: '01'
      light_id: light.xiaomi_gateway_light
      transition: '1'
    service: script.pulselight_loop
- id: 'Car Defroster: Stop Monitoring Temperature'
  alias: 'Car Defroster: Stop Monitoring Temperature'
  description: 'Car Defroster: Stop Monitoring Temperature'
  trigger:
  - at: 08:13
    platform: time
  condition: []
  action:
  - data:
      entity_id: automation.car_defroster_flash_light_if_car_needs_defrosted
    service: automation.turn_off
  - data: {}
    service: script.pulselight_stop
